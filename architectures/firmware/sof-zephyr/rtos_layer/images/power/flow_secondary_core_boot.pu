@startuml

box "Host" #LightSkyBlue
	participant "driver" as driver
end box

box "SOF" #LightBlue
	participant "Core #0: Zephyr lib" as sof_zephyr_lib_0
	participant "Core #1: FW Init" as fw_init_1
	participant "Zephyr Power Manager" as zephyr_power_manager
	participant "Zephyr SoC HAL" as soc_hal
end box

box "Hardware" #LightGreen
	participant "Core #1: Control" as core_control_1
end box

opt If D0ix is enabled
	driver -> sof_zephyr_lib_0: SET_D0ix(prevent D0/D0ix) IPC request
	activate sof_zephyr_lib_0
		sof_zephyr_lib_0 -> zephyr_power_manager: pm_policy_state_lock_get\n(PM_STATE_RUNTIME_IDLE)
		activate zephyr_power_manager
		return
	return
end

== DSP FW in PM_STATE_ACTIVE ==

driver -> sof_zephyr_lib_0: SET_DX(PID: Core #1, D0) IPC request
activate sof_zephyr_lib_0
		sof_zephyr_lib_0 -> soc_hal: arch_start_cpu(PID: Core #1)
		activate soc_hal
			soc_hal -> core_control_1: Set alternate boot vector to FW Init
			note right: Cores share the \nsame FW binary\nand the firmware must be\npresent in SRAM.
			soc_hal -> core_control_1: Set SPA bit

			core_control_1 -> fw_init_1: Start and jump to alternate boot vector
				activate fw_init_1
				fw_init_1 -> fw_init_1: Restore context\nif any saved

			loop Until Core #1 is enabled
				soc_hal -> core_control_1: read power register
			end
			deactivate fw_init_1
		return
return

@enduml
